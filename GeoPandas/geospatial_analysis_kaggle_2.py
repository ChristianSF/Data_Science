# -*- coding: utf-8 -*-
"""Geospatial_Analysis_Kaggle_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1adtU9IpDazoQ8Hi_rmJ73e6rgbSx6xd-
"""

!pip install geopandas

import pandas as pd
import geopandas as gpd

import folium
from folium import Choropleth
from folium.plugins import HeatMap

mapa = folium.Map(location=[42.32, -71.0589], tiles='openstreetmap', zoom_start=10)
mapa

plate_boundaries = gpd.read_file("/content/Plate_Boundaries.shp")
plate_boundaries['coordinates'] = plate_boundaries.apply(lambda x: [(b,a) for (a,b) in list(x.geometry.coords)], axis='columns')
plate_boundaries.drop('geometry', axis=1, inplace=True)

plate_boundaries.head()

plate_boundaries.shape

terremotos = pd.read_csv("/content/earthquakes1970-2014.csv", parse_dates=["DateTime"])
terremotos.head()

terremotos.shape

terremotos.isnull().sum()

terremotos.info()

import sys
print(sys.getrecursionlimit())

sys.setrecursionlimit(5000)

terremotos_lista = terremotos[['Latitude', 'Longitude']].values.tolist()

mapa = folium.Map(location=[35, 136], tiles='cartodbpositron', zoom_start=5)
for i in range(len(plate_boundaries)):
  folium.PolyLine(locations=plate_boundaries.coordinates.iloc[i], weight=2, color='black').add_to(mapa)


HeatMap(data=terremotos_lista, radius=15).add_to(mapa)
mapa.save("mapa.html")

mapa2 = folium.Map(location=[35, 136], tiles='cartodbpositron', zoom_start=5)
for i in range(len(plate_boundaries)):
  folium.PolyLine(locations=plate_boundaries.coordinates.iloc[i], weight=2, color='black').add_to(mapa2)


#HeatMap(data=terremotos_lista, radius=15).add_to(mapa)
#mapa.save("mapa.html")

def color_producer(val):
  if val < 50:
    return 'foretsgreen'
  elif val < 100:
    return 'darkorange'
  else:
    return 'darkred'

for i in range(0, len(terremotos)):
  folium.Circle(location=[terremotos.iloc[i]['Latitude'], terremotos.iloc[i]['Longitude']], radius=2000, color=color_producer(terremotos.iloc[i]['Depth'])).add_to(mapa2)

mapa2.save("mapa2.html")

prefeituras = gpd.read_file("/content/japan-prefecture-boundaries.shp")
prefeituras.set_index('prefecture', inplace=True)
prefeituras.head()

populacao = pd.read_csv("/content/japan-prefecture-population.csv")
populacao.set_index('prefecture', inplace=True)

populacao.head()

area_sqkm = pd.Series(prefeituras.geometry.to_crs(epsg=32654).area/10**6, name='area_sqkm')
stats = populacao.join(area_sqkm)

stats['density'] = stats['population']/stats['area_sqkm']
stats.head()

mapa3 = folium.Map(location=[35, 136], tiles='cartodbpositron', zoom_start=5)
Choropleth(geo_data=prefeituras['geometry'].__geo_interface__, data=stats['density'], key_on='feature.id', fill_color='YlGnBu', 
           legend_name='Densidade demográfica (por km²').add_to(mapa3)

mapa3.save('mapa3.html')

mapa4 = folium.Map(location=[35, 136], tiles='cartodbpositron', zoom_start=5)

def color_producer(magnitude):
  if magnitude > 6.5:
    return 'red'

  else:
    return 'green'

Choropleth(geo_data=prefeituras['geometry'].__geo_interface__, data=stats['density'], key_on='feature.id', fill_color='BuPu',
           legend_name='Densidade demográfica (por km²').add_to(mapa4)

for i in range(0, len(terremotos)):
  folium.Circle(location=[terremotos.iloc[i]['Latitude'], terremotos.iloc[i]['Longitude']],
                popup =("{} {}").format(terremotos.iloc[i]['Magnitude'],
                                        terremotos.iloc[i]['DateTime'].year),
                radius=terremotos.iloc[i]['Magnitude']**5.5,
                color=color_producer(terremotos.iloc[i]['Magnitude'])).add_to(mapa4)

mapa4.save("mapa4.html")

